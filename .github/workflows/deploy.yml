name: Deploy to DigitalOcean

on:
  push:
    branches: [ logging ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_REGISTRY_TOKEN }}

      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Create env file
        run: |
          cat << EOF > .env.production
          REGISTRY=${{ secrets.DO_REGISTRY }}
          MONGO_USER=${{ secrets.MONGO_USER }}
          MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          EOF
          
      - name: Build and Push Docker images
        env:
          REGISTRY: ${{ secrets.DO_REGISTRY }}
        run: |
          # Build API image with build args from env file
          docker build \
            --build-arg MONGO_USER=${{ secrets.MONGO_USER }} \
            --build-arg MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --build-arg FRONTEND_URL=${{ secrets.FRONTEND_URL }} \
            -t $(echo $REGISTRY)/expense-api:latest \
            .
          
          docker push $(echo $REGISTRY)/expense-api:latest

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DO_SSH_KEY }}
          known_hosts: 'placeholder'
          
      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.DO_HOST }} >> ~/.ssh/known_hosts

      - name: Copy env file to server
        run: |
          scp .env.production root@${{ secrets.DO_HOST }}:/opt/expense-tracker/

      - name: Deploy to DigitalOcean
        run: |
          ssh root@${{ secrets.DO_HOST }} << 'ENDSSH'
            cd /opt/expense-tracker
            
            # Stop and remove existing containers
            docker-compose down
            
            # Pull latest images
            docker-compose pull
            
            # Start containers with env file
            docker-compose up -d
            
            # Clean up
            docker system prune -f
            
            # Wait for application to be ready
            echo "Waiting for application to start..."
            sleep 20
            
            # Check if application is running
            if curl -f http://localhost:4000/health; then
              echo "Deployment successful!"
            else
              echo "Deployment failed!"
              exit 1
            fi
          ENDSSH